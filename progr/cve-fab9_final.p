{admcab.i}

/* * * "no-undo" incluido em todas definicoes 17/08/06 * * * */

def var vdata-aux as date format "99/99/9999" no-undo.
def buffer xclase for clase.
def buffer bclase for clase.
def buffer cclase for clase.
def buffer dclase for clase.
def buffer eclase for clase.
def buffer fclase for clase.
def buffer gclase for clase.

def temp-table tt-cve no-undo
    field fabcod like fabri.fabcod
    field fabnom like fabri.fabnom format "x(30)"
    field est-ven like estoq.estvenda format "->>>,>>9" /*est-ven "FISICO"*/
    field venda like estoq.estvenda format "->>>,>>9.99" /*venda "FINANCEIRO"*/
    field est-com like estoq.estvenda format "->>>,>>9" /*est-com "FISICO"*/
    field compra like estoq.estvenda format "->>>,>>9.99" /*compra"FINANCEIRO*/
    field est-atu like estoq.estvenda format "->>>,>>9" /*est-atu "FISICO"*/
    field valest like estoq.estvenda format "->>,>>>,>>9.99" /*valestFIN.VENDA*/
    field valcus like estoq.estvenda format "->>>,>>9.99" /*valcusFIN.CUSTO*/
    index icve is primary unique fabcod.
    /*giro       (est-ven / venda)*/

def temp-table tt-cla no-undo
    field clacod like clase.clacod
    field clanom like clase.clanom
    index iclase is primary unique clacod.

def var vclacod like clase.clacod no-undo.

def var vnom as char no-undo.
def temp-table tt-estab no-undo
    field etbcod like estab.etbcod.

def var varquivo as char no-undo.    
def var vano     as i no-undo.
def var vmes     as i no-undo.
def buffer bestoq for estoq.
DEF VAR est-ven  like estoq.estvenda format "->>>,>>9" no-undo.
DEF VAR venda    like estoq.estvenda format "->>>,>>9.99" no-undo.
DEF VAR est-com  like estoq.estvenda format "->>>,>>9" no-undo.
DEF VAR compra   like estoq.estvenda format "->>>,>>9.99" no-undo.
DEF VAR est-atu  like estoq.estvenda format "->>>,>>9" no-undo.
DEF VAR valest   like estoq.estvenda format "->>,>>>,>>9.99" no-undo.
DEF VAR valcus   like estoq.estvenda format "->>>,>>9.99" no-undo.
def var totcusto like estoq.estcusto no-undo.
def var totvenda like estoq.estcusto no-undo.
def var acre like plani.platot no-undo.
def var des like plani.platot no-undo.
def buffer bcurva for curva.
def buffer bmovim for movim.
def var totc like plani.platot no-undo. 
def var tot-v like plani.platot format "->>9.99" no-undo.
def var tot-m like plani.platot no-undo.
def var vacum like plani.platot format "->>9.99" no-undo.
def var wnp as i no-undo.
def var vvltotal as dec no-undo.
def var vvlcont  as dec no-undo.
def var wacr     as dec no-undo.
def var wper     as dec no-undo.
def var valortot as dec no-undo.
def var vval     as dec no-undo.
def var vval1    as dec no-undo.
def var vsal     as dec no-undo.
def var vlfinan  as dec no-undo.
def var vdti     as date format "99/99/9999" no-undo.
def var vdtf     as date format "99/99/9999" no-undo.
def var vetbcod   like estab.etbcod no-undo.
def var vetbf     like estab.etbcod no-undo.
def var vvlcusto  like plani.platot column-label "Vl.Custo" no-undo.
def var vvlvenda  like plani.platot column-label "Vl.Venda" no-undo.
def var vvlmarg   like plani.platot column-label "Margem" no-undo.
def var vvlperc   as dec format ">>9.99 %" column-label "Perc" no-undo.
def var vvldesc   like plani.descprod column-label "Desconto" no-undo.
def var vvlacre   like plani.acfprod column-label "Acrescimo" no-undo.
def var vacrepre  like plani.acfprod column-label "Acr.Previsto" no-undo.
def var vcatcod   like produ.catcod no-undo.
def stream stela.
def buffer bcontnf  for contnf.
def buffer bplani   for plani.
def var cla1        like clase.clacod no-undo.
def var cla2        like clase.clacod no-undo.

/* bloco 0 */
repeat:
  assign
    vnom = ""
    est-ven = 0
    venda   = 0
    est-com = 0
    compra  = 0
    est-atu = 0
    valest  = 0
    valcus  = 0.

  repeat transaction: 
    for each tt-cve:
        delete tt-cve.
    end.
    
    for each tt-cla:
        delete tt-cla.
    end.
    
    for each tt-estab:
        delete tt-estab.
    end.
    if (not can-find(first tt-cve)) and
       (not can-find(first tt-cla)) and
       (not can-find(first tt-estab)) then leave.
  end.
    
    
    update vcatcod label "Departamento"
                with frame f-dep centered side-label color blue/cyan row 4.
    find categoria where categoria.catcod = vcatcod no-lock.
    disp categoria.catnom no-label with frame f-dep.

    update /*cla1 label "Classe"
           cla2 label "Ate"*/
           vclacod label "Classe"
                with frame f-cla centered side-label color blue/cyan row 8.

     
    find xclase where xclase.clacod = vclacod /*cla1*/ no-lock no-error.
    disp xclase.clanom no-label with frame f-cla.
    
  /******/
  if vclacod <> 0
  then do:
    find first clase where clase.clasup = vclacod no-lock no-error. 
    if avail clase 
    then do:
        run cria-tt-cla. 
        hide message no-pause.
    end. 
    else do:
        find clase where clase.clacod = vclacod no-lock no-error.
        if not avail clase
        then do:
            message "Classe nao Cadastrada".
            undo.
        end.

        create tt-cla.
        assign tt-cla.clacod = clase.clacod
               tt-cla.clanom = clase.clanom.

    end.
  end.
  /******/    
    
    /* bloco 1 */
    repeat:
        for each tt-estab:
            disp tt-estab.etbcod column-label "Filiais"
                    with frame f-down row 05 down color blue/cyan.
        end.
        
        update vetbcod
            with frame f-etb centered side-label color blue/cyan row 12.
        if vetbcod <> 0
        then do:
            find estab where estab.etbcod = vetbcod no-lock.
            create tt-estab.
            assign tt-estab.etbcod = estab.etbcod.
        end.
        else do:
            display "GERAL" with frame f-etb.
            vnom = "GERAL".
            for each estab no-lock:
                create tt-estab.
                assign tt-estab.etbcod = estab.etbcod.
            end.
            leave.
        end.
    end. /* bloco 1 */

    update vdti no-label
           "a"
           vdtf no-label with frame f-dat centered color blue/cyan row 16
                                    title " Periodo ".
    /* *** foi la pra cima
    assign est-ven = 0
           venda   = 0
           est-com = 0
           compra  = 0
           est-atu = 0
           valest  = 0
           valcus  = 0.
    * * * */
           
    /* * *  minimizando numero de blocos *     
    if vnom = ""
    then do:
        for each tt-estab:
            vnom = vnom + string(tt-estab.etbcod,"999") + " ".
        end.
    end.
    * * * */

    if vnom = "" then 
       for each tt-estab:                                                                 vnom = vnom + string(tt-estab.etbcod,"999") + " ".
       end.

    message "Confirma a Emissao do Relatorio ? " update sresp.
    if not sresp
    then next.
   
    if opsys = "UNIX"
    then varquivo = "/admcom/relat/cve" + string(time).
    else varquivo = "..\relat\cve" + string(time).
 
    {mdad.i
        &Saida     = "value(varquivo)"
        &Page-Size = "64"
        &Cond-Var  = "135"
        &Page-Line = "66"
        &Nom-Rel   = ""CVE-FAB""
        &Nom-Sis   = """SISTEMA DE ESTOQUE"""
        &Tit-Rel   = """RESUMO COM/VEN/EST - FILIAL "" +
                            string(vnom,""x(25)"") +
                      "" PERIODO DE "" +
                         string(vdti,""99/99/9999"") + "" A "" +
                         string(vdtf,""99/99/9999"") "
       &Width     = "135"
       &Form      = "frame f-cabcab"}

      if line-counter = 6
      then
      put "       V E N D A S            C O M P R A S         E S T O Q U E S "
                AT 35 skip fill("-",135) format "x(135)".

        display categoria.catcod
                categoria.catnom no-label skip(1)
                        with frame f-d side-label width 150.
        display xclase.clacod xclase.clanom no-label
                /*"DE " cla1 "ATE " cla2 */ skip(1)
                        with frame f-c side-label width 150.

        for each produ where produ.catcod = categoria.catcod /*
                             no-lock break by produ.fabcod*/ no-lock:
 
            find first movim where movim.procod = produ.procod and
                                   movim.movdat >= vdti        and
                                   movim.movdat <= vdtf no-lock no-error.
            
            /* * * * minimizando numero de blocos          
            if not avail movim
            then do:
                find first estoq where estoq.procod = produ.procod and
                                       estoq.estatual <> 0 no-lock no-error.
                if not avail estoq
                then next.
            end.
            * * eh feito find em estoq novamente logo abaixo * */
            
            if not avail movim and 
               not can-find(first estoq
                              where estoq.procod = produ.procod
                                and estoq.estatual <> 0)
               then next.

            /* * * minimizando numero de blocos * *  
            if vclacod = 0
            then.
            else do:
                find tt-cla where tt-cla.clacod = produ.clacod no-lock no-error.
                if not avail tt-cla
                then next.
            end.
            * * * */
            
            if vclacod <> 0 then
              if not can-find(tt-cla where tt-cla.clacod = produ.clacod) 
              then next.


            for each tt-estab:
            
                /* bloco 2 */
                do vdata-aux = vdti to vdtf:
                
                  /* * * * O mesmo for each 3 vezez!!!  * * * * * 
                  for each movim where movim.procod = produ.procod and
                                  movim.etbcod = tt-estab.etbcod and
                                  movim.movtdc = 05           and <----
                                  movim.movdat = vdata-aux no-lock:
                  for each movim where movim.procod = produ.procod and
                                  movim.etbcod = tt-estab.etbcod and
                                  movim.movtdc = 04              and <----
                                  movim.movdat = vdata-aux no-lock:
                  for each movim where movim.procod = produ.procod and
                                  movim.etbcod = tt-estab.etbcod and
                                  movim.movtdc = 01              and <----
                                  movim.movdat = vdata-aux no-lock:
                  * * * * * * * * */
                
                    for each movim where movim.procod = produ.procod and
                                     movim.etbcod = tt-estab.etbcod and
      /* vide comentario acima       movim.movtdc = 05              and */
                                     movim.movdat = vdata-aux no-lock:
                                /*   movim.datexp = vdata-aux no-lock:*/

                      case movim.movtdc:
                        when 05 then do:
                             assign     
                              totc = 0
                              des  = 0
                              acre = 0.
               
                            find first plani 
                                 where plani.etbcod = movim.etbcod and
                                       plani.placod = movim.placod and
                                       plani.movtdc = movim.movtdc and
                                       plani.pladat = movim.movdat
                                   no-lock no-error.
                            if avail plani and plani.crecod = 2
                            then do:
                                if plani.platot > plani.biss
                                then des = plani.platot / plani.biss.
                                if plani.platot < plani.biss
                                then acre = plani.biss / plani.platot.
                            end.

                            if acre > 0
                            then venda = venda + 
                                        ((movim.movpc * movim.movqtm) * acre).
                            if des > 0
                            then venda = venda + 
                                        ((movim.movpc * movim.movqtm) / des).
                            if des = 0 and acre = 0
                           then venda = venda + (movim.movpc * movim.movqtm).

                             est-ven = est-ven + movim.movqtm.
                             
                           /* end. * * * "each movim" */
                    
                        end. /* when 05 */
                        when 04 then do: 
                 
                          /* * * * 
                         for each movim where movim.procod = produ.procod and
                                      movim.etbcod = tt-estab.etbcod and
                                     movim.movtdc = 04              and
                                     movim.movdat = vdata-aux no-lock:
                               /*    movim.datexp = vdata-aux no-lock:*/
                          * * * */
                          
                         assign
                           compra  = compra + ( (movim.movpc * movim.movqtm) +
                                  ((movim.movpc * movim.movqtm) *  
                                  (movim.movalipi / 100)) )               
                         est-com = est-com + movim.movqtm.
                            
                         /* end. * * * "each movim"  */

                        end. /* when 04 */
                        when 01 then do:
                                 
                         /* * * * 
                         for each movim where movim.procod = produ.procod and
                                     movim.etbcod = tt-estab.etbcod and
                                     movim.movtdc = 01              and
                                     movim.movdat = vdata-aux no-lock:
                            /*       movim.datexp = vdata-aux no-lock:*/
                          * * * */
                         
                         assign
                          compra  = compra + ( (movim.movpc * movim.movqtm) +
                                   ((movim.movpc * movim.movqtm) *
                                   (movim.movalipi / 100)) )             
                         est-com = est-com + movim.movqtm.
               
                          /*  end. * * * "each movim" */
                   
                        end. /* when 01 */
                      end case.
                 
                    end. /* movim */
 
 
               end. /* do - bloco 2 */

               find estoq where estoq.etbcod = tt-estab.etbcod and
                                estoq.procod = produ.procod no-lock no-error.
               if avail estoq
               then assign 
                        valest  = valest + (estoq.estatual * estoq.estvenda)
                        valcus  = valcus + (estoq.estatual * estoq.estcusto)
                        est-atu = est-atu + estoq.estatual.
                        
            end. /* for each tt-estab */
            
            output stream stela to terminal.
            disp stream stela produ.procod produ.clacod
                        with frame ffff centered color white/red 1 down.
            pause 0.
            output stream stela close.

            if est-ven = 0 and
               venda   = 0 and
               est-com = 0 and
               compra  = 0 and
               est-atu = 0 and
               valest  = 0 and
               valcus  = 0 then next.

           find tt-cve where tt-cve.fabcod = produ.fabcod no-error.
           if not avail tt-cve
           then do:
               find fabri where fabri.fabcod = produ.fabcod no-lock no-error.

               create tt-cve.
               assign tt-cve.fabcod = produ.fabcod
                      tt-cve.fabnom = fabri.fabnom.
           end.           
           
           assign tt-cve.est-ven = tt-cve.est-ven + est-ven
                  tt-cve.venda   = tt-cve.venda   + venda
                  tt-cve.est-com = tt-cve.est-com + est-com
                  tt-cve.compra  = tt-cve.compra  + compra
                  tt-cve.est-atu = tt-cve.est-atu + est-atu
                  tt-cve.valest  = tt-cve.valest  + valest
                  tt-cve.valcus  = tt-cve.valcus  + valcus.
 
          /* * * * * * * * * * * * * * 
          if last-of(produ.fabcod)
          then do:
            if est-ven = 0 and
               venda   = 0 and
               est-com = 0 and
               compra = 0   and
               est-atu = 0  and
               valest  = 0  and
               valcus  = 0
            then next.
            find fabri where fabri.fabcod = produ.fabcod no-lock no-error.

            if line-counter = 6
            then put
 "        V E N D A S             C O M P R A S               E S T O Q U E S "
                AT 35 skip fill("-",135) format "x(135)".

            display
                    produ.fabcod
                    fabri.fabnom when avail fabri format "x(30)"
           est-ven(total) column-label "FISICO"
           venda(total)    column-label "FINANCEIRO"
           est-com(total) column-label "FISICO"
           compra(total)  column-label "FINANCEIRO"
           est-atu(total) column-label "FISICO"
           valest(total)  column-label "FIN.VENDA"
           valcus(total)  column-label "FIN.CUSTO"
           (est-ven / venda) column-label "GIRO" format ">,>>9.99"
                                        with frame f-1 width 200 down no-box.
           * * * * * * * * * * */

            assign est-ven = 0
                   venda   = 0
                   est-com = 0
                   compra = 0
                   est-atu = 0
                   valest  = 0
                   valcus  = 0.
         /**end.
         */
        
        end. /* for each produ */

       for each tt-cve break by tt-cve.fabcod:
    
          if line-counter = 6
          then put
 "        V E N D A S             C O M P R A S               E S T O Q U E S "
                AT 35 skip fill("-",135) format "x(135)".

         display 
           tt-cve.fabcod
           tt-cve.fabnom         format "x(30)"
           tt-cve.est-ven(total) column-label "FISICO"
           tt-cve.venda(total)   column-label "FINANCEIRO"
           tt-cve.est-com(total) column-label "FISICO"
           tt-cve.compra(total)  column-label "FINANCEIRO"
           tt-cve.est-atu(total) column-label "FISICO"
           tt-cve.valest(total)  column-label "FIN.VENDA"
           tt-cve.valcus(total)  column-label "FIN.CUSTO"
           (tt-cve.est-ven / tt-cve.venda) 
                                 column-label "GIRO" format ">,>>9.99"
                                 with frame f-1 width 200 down no-box.
    
       end. /* for each tt-cve */
    
       output close.
    
       if opsys = "UNIX"
       then do:
          message "Arquivo Gerado em: " varquivo. pause. 
          /* run visurel.p(input varquivo, input ""). */
       end.    
       else do:
         {mrod.i}
       end.    
    
     /*
     message "Deseja Imprimir Relatorio" update sresp.
     if sresp
     then dos silent value( "type c:\tmp\cve-fab > prn" ).
     */
    
end. /* repeat - bloco 0 */

/* * * * * * * * */

procedure cria-tt-cla.
 for each clase where clase.clasup = vclacod no-lock:
   find first bclase where bclase.clasup = clase.clacod no-lock no-error.
   if not avail bclase
   then do: 
     find tt-cla where tt-cla.clacod = clase.clacod no-error. 
     if not avail tt-cla 
     then do: 
       create tt-cla. 
       assign tt-cla.clacod = clase.clacod 
              tt-cla.clanom = clase.clanom.
     end.
   end.
   else do: 
     for each bclase where bclase.clasup = clase.clacod no-lock: 
         find first cclase where cclase.clasup = bclase.clacod no-lock no-error.
         if not avail cclase
         then do: 
           find tt-cla where tt-cla.clacod = bclase.clacod no-error. 
           if not avail tt-cla 
           then do: 
             create tt-cla. 
             assign tt-cla.clacod = bclase.clacod 
                    tt-cla.clanom = bclase.clanom.
           end.
         end.
         else do: 
           for each cclase where cclase.clasup = bclase.clacod no-lock: 
             find first dclase where dclase.clasup = cclase.clacod 
                                                     no-lock no-error. 
             if not avail dclase 
             then do: 
               find tt-cla where tt-cla.clacod = cclase.clacod no-error. 
               if not avail tt-cla 
               then do: 
                 create tt-cla. 
                 assign tt-cla.clacod = cclase.clacod 
                        tt-cla.clanom = cclase.clanom.
               end.                          
             end.
             else do: 
               for each dclase where dclase.clasup = cclase.clacod no-lock: 
                 find first eclase where eclase.clasup = dclase.clacod 
                                                         no-lock no-error. 
                 if not avail eclase 
                 then do: 
                   find tt-cla where tt-cla.clacod = dclase.clacod no-error.
                   if not avail tt-cla 
                   then do: 
                     create tt-cla. 
                     assign tt-cla.clacod = dclase.clacod 
                            tt-cla.clanom = dclase.clanom. 
                   end.       
                 end. 
                 else do:  
                   for each eclase where eclase.clasup = dclase.clacod no-lock:
                     find first fclase where fclase.clasup = eclase.clacod 
                                                             no-lock no-error.
                     if not avail fclase 
                     then do: 
                       find tt-cla where tt-cla.clacod = eclase.clacod
                                                             no-error.
                       if not avail tt-cla 
                       then do: 
                         create tt-cla. 
                         assign tt-cla.clacod = eclase.clacod 
                                tt-cla.clanom = eclase.clanom.
                       end.
                     end.
                     else do:
                     
                       for each fclase where fclase.clasup = eclase.clacod
                                    no-lock:
                         find first gclase where gclase.clasup = fclase.clacod 
                                                             no-lock no-error.
                         if not avail gclase 
                         then do: 
                           find tt-cla where tt-cla.clacod = fclase.clacod
                                                                 no-error.
                           if not avail tt-cla 
                           then do: 
                             create tt-cla. 
                             assign tt-cla.clacod = fclase.clacod 
                                    tt-cla.clanom = fclase.clanom.
                           end.
                         end.
                         else do:
                             find tt-cla where tt-cla.clacod = gclase.clacod 
                                                        no-error.
                             if not avail tt-cla
                             then do:
                             
                                 create tt-cla. 
                                 assign tt-cla.clacod = gclase.clacod 
                                        tt-cla.clanom = gclase.clanom.
                                        
                             end.  
                         end.
                       end.
                     end.
                   end.
                 end.
               end.
             end.
           end.                                  
         end.
     end.
   end.
 end.
end procedure.


